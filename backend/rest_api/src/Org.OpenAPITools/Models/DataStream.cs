/*
 * waterprobing
 *
 * API for waterprobing
 *
 * The version of the OpenAPI document: 1
 * Contact: sw708e19@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DataStream : IEquatable<DataStream>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ObservationType
        /// </summary>
        [Required]
        [DataMember(Name="observationType", EmitDefaultValue=false)]
        public Object ObservationType { get; set; }

        /// <summary>
        /// Gets or Sets ObservedArea
        /// </summary>
        [DataMember(Name="observedArea", EmitDefaultValue=false)]
        public Object ObservedArea { get; set; }

        /// <summary>
        /// Gets or Sets PhenomenonTime
        /// </summary>
        [DataMember(Name="phenomenonTime", EmitDefaultValue=false)]
        public Object PhenomenonTime { get; set; }

        /// <summary>
        /// Gets or Sets ResultTime
        /// </summary>
        [DataMember(Name="resultTime", EmitDefaultValue=false)]
        public Object ResultTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataStream {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ObservationType: ").Append(ObservationType).Append("\n");
            sb.Append("  ObservedArea: ").Append(ObservedArea).Append("\n");
            sb.Append("  PhenomenonTime: ").Append(PhenomenonTime).Append("\n");
            sb.Append("  ResultTime: ").Append(ResultTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DataStream)obj);
        }

        /// <summary>
        /// Returns true if DataStream instances are equal
        /// </summary>
        /// <param name="other">Instance of DataStream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataStream other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ObservationType == other.ObservationType ||
                    ObservationType != null &&
                    ObservationType.Equals(other.ObservationType)
                ) && 
                (
                    ObservedArea == other.ObservedArea ||
                    ObservedArea != null &&
                    ObservedArea.Equals(other.ObservedArea)
                ) && 
                (
                    PhenomenonTime == other.PhenomenonTime ||
                    PhenomenonTime != null &&
                    PhenomenonTime.Equals(other.PhenomenonTime)
                ) && 
                (
                    ResultTime == other.ResultTime ||
                    ResultTime != null &&
                    ResultTime.Equals(other.ResultTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ObservationType != null)
                    hashCode = hashCode * 59 + ObservationType.GetHashCode();
                    if (ObservedArea != null)
                    hashCode = hashCode * 59 + ObservedArea.GetHashCode();
                    if (PhenomenonTime != null)
                    hashCode = hashCode * 59 + PhenomenonTime.GetHashCode();
                    if (ResultTime != null)
                    hashCode = hashCode * 59 + ResultTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DataStream left, DataStream right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DataStream left, DataStream right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
