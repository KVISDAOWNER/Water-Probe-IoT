# coding: utf-8

"""
    WaterProbe API

    API for waterprobing  # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DataStream(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'observation_type': 'object',
        'unit_of_measurement': 'list[object]',
        'observed_area': 'object',
        'phenomenon_time': 'object',
        'result_time': 'object',
        'thing_ref': 'str',
        'sensor_ref': 'str',
        'observed_property_ref': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'observation_type': 'observationType',
        'unit_of_measurement': 'unitOfMeasurement',
        'observed_area': 'observedArea',
        'phenomenon_time': 'phenomenonTime',
        'result_time': 'resultTime',
        'thing_ref': 'thingRef',
        'sensor_ref': 'sensorRef',
        'observed_property_ref': 'observedPropertyRef'
    }

    def __init__(self, name=None, description=None, observation_type=None, unit_of_measurement=None, observed_area=None, phenomenon_time=None, result_time=None, thing_ref=None, sensor_ref=None, observed_property_ref=None):  # noqa: E501
        """DataStream - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._description = None
        self._observation_type = None
        self._unit_of_measurement = None
        self._observed_area = None
        self._phenomenon_time = None
        self._result_time = None
        self._thing_ref = None
        self._sensor_ref = None
        self._observed_property_ref = None
        self.discriminator = None

        self.name = name
        self.description = description
        self.observation_type = observation_type
        self.unit_of_measurement = unit_of_measurement
        if observed_area is not None:
            self.observed_area = observed_area
        if phenomenon_time is not None:
            self.phenomenon_time = phenomenon_time
        if result_time is not None:
            self.result_time = result_time
        if thing_ref is not None:
            self.thing_ref = thing_ref
        if sensor_ref is not None:
            self.sensor_ref = sensor_ref
        if observed_property_ref is not None:
            self.observed_property_ref = observed_property_ref

    @property
    def name(self):
        """Gets the name of this DataStream.  # noqa: E501


        :return: The name of this DataStream.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataStream.


        :param name: The name of this DataStream.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this DataStream.  # noqa: E501


        :return: The description of this DataStream.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataStream.


        :param description: The description of this DataStream.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def observation_type(self):
        """Gets the observation_type of this DataStream.  # noqa: E501


        :return: The observation_type of this DataStream.  # noqa: E501
        :rtype: object
        """
        return self._observation_type

    @observation_type.setter
    def observation_type(self, observation_type):
        """Sets the observation_type of this DataStream.


        :param observation_type: The observation_type of this DataStream.  # noqa: E501
        :type: object
        """
        if observation_type is None:
            raise ValueError("Invalid value for `observation_type`, must not be `None`")  # noqa: E501

        self._observation_type = observation_type

    @property
    def unit_of_measurement(self):
        """Gets the unit_of_measurement of this DataStream.  # noqa: E501


        :return: The unit_of_measurement of this DataStream.  # noqa: E501
        :rtype: list[object]
        """
        return self._unit_of_measurement

    @unit_of_measurement.setter
    def unit_of_measurement(self, unit_of_measurement):
        """Sets the unit_of_measurement of this DataStream.


        :param unit_of_measurement: The unit_of_measurement of this DataStream.  # noqa: E501
        :type: list[object]
        """
        if unit_of_measurement is None:
            raise ValueError("Invalid value for `unit_of_measurement`, must not be `None`")  # noqa: E501

        self._unit_of_measurement = unit_of_measurement

    @property
    def observed_area(self):
        """Gets the observed_area of this DataStream.  # noqa: E501


        :return: The observed_area of this DataStream.  # noqa: E501
        :rtype: object
        """
        return self._observed_area

    @observed_area.setter
    def observed_area(self, observed_area):
        """Sets the observed_area of this DataStream.


        :param observed_area: The observed_area of this DataStream.  # noqa: E501
        :type: object
        """

        self._observed_area = observed_area

    @property
    def phenomenon_time(self):
        """Gets the phenomenon_time of this DataStream.  # noqa: E501


        :return: The phenomenon_time of this DataStream.  # noqa: E501
        :rtype: object
        """
        return self._phenomenon_time

    @phenomenon_time.setter
    def phenomenon_time(self, phenomenon_time):
        """Sets the phenomenon_time of this DataStream.


        :param phenomenon_time: The phenomenon_time of this DataStream.  # noqa: E501
        :type: object
        """

        self._phenomenon_time = phenomenon_time

    @property
    def result_time(self):
        """Gets the result_time of this DataStream.  # noqa: E501


        :return: The result_time of this DataStream.  # noqa: E501
        :rtype: object
        """
        return self._result_time

    @result_time.setter
    def result_time(self, result_time):
        """Sets the result_time of this DataStream.


        :param result_time: The result_time of this DataStream.  # noqa: E501
        :type: object
        """

        self._result_time = result_time

    @property
    def thing_ref(self):
        """Gets the thing_ref of this DataStream.  # noqa: E501


        :return: The thing_ref of this DataStream.  # noqa: E501
        :rtype: str
        """
        return self._thing_ref

    @thing_ref.setter
    def thing_ref(self, thing_ref):
        """Sets the thing_ref of this DataStream.


        :param thing_ref: The thing_ref of this DataStream.  # noqa: E501
        :type: str
        """

        self._thing_ref = thing_ref

    @property
    def sensor_ref(self):
        """Gets the sensor_ref of this DataStream.  # noqa: E501


        :return: The sensor_ref of this DataStream.  # noqa: E501
        :rtype: str
        """
        return self._sensor_ref

    @sensor_ref.setter
    def sensor_ref(self, sensor_ref):
        """Sets the sensor_ref of this DataStream.


        :param sensor_ref: The sensor_ref of this DataStream.  # noqa: E501
        :type: str
        """

        self._sensor_ref = sensor_ref

    @property
    def observed_property_ref(self):
        """Gets the observed_property_ref of this DataStream.  # noqa: E501


        :return: The observed_property_ref of this DataStream.  # noqa: E501
        :rtype: str
        """
        return self._observed_property_ref

    @observed_property_ref.setter
    def observed_property_ref(self, observed_property_ref):
        """Sets the observed_property_ref of this DataStream.


        :param observed_property_ref: The observed_property_ref of this DataStream.  # noqa: E501
        :type: str
        """

        self._observed_property_ref = observed_property_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataStream):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
