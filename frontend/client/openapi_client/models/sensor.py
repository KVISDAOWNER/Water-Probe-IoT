# coding: utf-8

"""
    WaterProbe API

    API for waterprobing  # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Sensor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'encoding_type': 'object',
        'meta_data': 'object'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'encoding_type': 'encodingType',
        'meta_data': 'metaData'
    }

    def __init__(self, name=None, description=None, encoding_type=None, meta_data=None):  # noqa: E501
        """Sensor - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._description = None
        self._encoding_type = None
        self._meta_data = None
        self.discriminator = None

        self.name = name
        self.description = description
        self.encoding_type = encoding_type
        self.meta_data = meta_data

    @property
    def name(self):
        """Gets the name of this Sensor.  # noqa: E501


        :return: The name of this Sensor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sensor.


        :param name: The name of this Sensor.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Sensor.  # noqa: E501


        :return: The description of this Sensor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Sensor.


        :param description: The description of this Sensor.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def encoding_type(self):
        """Gets the encoding_type of this Sensor.  # noqa: E501


        :return: The encoding_type of this Sensor.  # noqa: E501
        :rtype: object
        """
        return self._encoding_type

    @encoding_type.setter
    def encoding_type(self, encoding_type):
        """Sets the encoding_type of this Sensor.


        :param encoding_type: The encoding_type of this Sensor.  # noqa: E501
        :type: object
        """
        if encoding_type is None:
            raise ValueError("Invalid value for `encoding_type`, must not be `None`")  # noqa: E501

        self._encoding_type = encoding_type

    @property
    def meta_data(self):
        """Gets the meta_data of this Sensor.  # noqa: E501


        :return: The meta_data of this Sensor.  # noqa: E501
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this Sensor.


        :param meta_data: The meta_data of this Sensor.  # noqa: E501
        :type: object
        """
        if meta_data is None:
            raise ValueError("Invalid value for `meta_data`, must not be `None`")  # noqa: E501

        self._meta_data = meta_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sensor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
