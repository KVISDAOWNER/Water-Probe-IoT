/*
 * WaterProbe API
 *
 * API for waterprobing
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using SensorThingsAPI.Converters;
using MongoDB.Bson.Serialization.Attributes;
using MongoDB.Bson;

namespace SensorThingsAPI.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Observation : IEquatable<Observation>
    {
        [BsonRepresentation(BsonType.ObjectId)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PhenomenonTime
        /// </summary>
        [BsonElement("phenomenonTime")]
        [Required]
        [DataMember(Name="phenomenonTime", EmitDefaultValue=false)]
        public string PhenomenonTime { get; set; }

        /// <summary>
        /// Gets or Sets ResultTime
        /// </summary>
        [BsonElement("resultTime")]
        [Required]
        [DataMember(Name="resultTime", EmitDefaultValue=false)]
        public string ResultTime { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [BsonElement("result")]
        [Required]
        [DataMember(Name="result", EmitDefaultValue=false)]
        public double Result { get; set; }

        /// <summary>
        /// Gets or Sets ResultQuality
        /// </summary>
        [BsonElement("resulQuality")]
        [DataMember(Name="resultQuality", EmitDefaultValue=false)]
        public List<Object> ResultQuality { get; set; }

        /// <summary>
        /// Gets or Sets ValidTime
        /// </summary>
        [BsonElement("validTime")]
        [DataMember(Name="validTime", EmitDefaultValue=false)]
        public List<Object> ValidTime { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [BsonElement("parameters")]
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public List<Object> Parameters { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Observation {\n");
            sb.Append("  PhenomenonTime: ").Append(PhenomenonTime).Append("\n");
            sb.Append("  ResultTime: ").Append(ResultTime).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  ResultQuality: ").Append(ResultQuality).Append("\n");
            sb.Append("  ValidTime: ").Append(ValidTime).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Observation)obj);
        }

        /// <summary>
        /// Returns true if Observation instances are equal
        /// </summary>
        /// <param name="other">Instance of Observation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Observation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    PhenomenonTime == other.PhenomenonTime ||
                    PhenomenonTime != null &&
                    PhenomenonTime.Equals(other.PhenomenonTime)
                ) &&
                (
                    ResultTime == other.ResultTime ||
                    ResultTime != null &&
                    ResultTime.Equals(other.ResultTime)
                ) &&
                (
                    Result == other.Result ||

                    Result.Equals(other.Result)
                ) &&
                (
                    ResultQuality == other.ResultQuality ||
                    ResultQuality != null &&
                    other.ResultQuality != null &&
                    ResultQuality.SequenceEqual(other.ResultQuality)
                ) &&
                (
                    ValidTime == other.ValidTime ||
                    ValidTime != null &&
                    other.ValidTime != null &&
                    ValidTime.SequenceEqual(other.ValidTime)
                ) &&
                (
                    Parameters == other.Parameters ||
                    Parameters != null &&
                    other.Parameters != null &&
                    Parameters.SequenceEqual(other.Parameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PhenomenonTime != null)
                    hashCode = hashCode * 59 + PhenomenonTime.GetHashCode();
                    if (ResultTime != null)
                    hashCode = hashCode * 59 + ResultTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + Result.GetHashCode();
                    if (ResultQuality != null)
                    hashCode = hashCode * 59 + ResultQuality.GetHashCode();
                    if (ValidTime != null)
                    hashCode = hashCode * 59 + ValidTime.GetHashCode();
                    if (Parameters != null)
                    hashCode = hashCode * 59 + Parameters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Observation left, Observation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Observation left, Observation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
