# coding: utf-8

"""
    WaterProbe API

    API for waterprobing  # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Observation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'phenomenon_time': 'TmObject',
        'result_time': 'TmInstant',
        'result': 'float',
        'result_quality': 'list[object]',
        'valid_time': 'list[object]',
        'parameters': 'list[object]',
        'datastream_ref': 'str',
        'feature_of_interest_ref': 'str'
    }

    attribute_map = {
        'phenomenon_time': 'phenomenonTime',
        'result_time': 'resultTime',
        'result': 'result',
        'result_quality': 'resultQuality',
        'valid_time': 'validTime',
        'parameters': 'parameters',
        'datastream_ref': 'datastreamRef',
        'feature_of_interest_ref': 'featureOfInterestRef'
    }

    def __init__(self, phenomenon_time=None, result_time=None, result=None, result_quality=None, valid_time=None, parameters=None, datastream_ref=None, feature_of_interest_ref=None):  # noqa: E501
        """Observation - a model defined in OpenAPI"""  # noqa: E501

        self._phenomenon_time = None
        self._result_time = None
        self._result = None
        self._result_quality = None
        self._valid_time = None
        self._parameters = None
        self._datastream_ref = None
        self._feature_of_interest_ref = None
        self.discriminator = None

        self.phenomenon_time = phenomenon_time
        self.result_time = result_time
        self.result = result
        if result_quality is not None:
            self.result_quality = result_quality
        if valid_time is not None:
            self.valid_time = valid_time
        if parameters is not None:
            self.parameters = parameters
        self.datastream_ref = datastream_ref
        if feature_of_interest_ref is not None:
            self.feature_of_interest_ref = feature_of_interest_ref

    @property
    def phenomenon_time(self):
        """Gets the phenomenon_time of this Observation.  # noqa: E501


        :return: The phenomenon_time of this Observation.  # noqa: E501
        :rtype: TmObject
        """
        return self._phenomenon_time

    @phenomenon_time.setter
    def phenomenon_time(self, phenomenon_time):
        """Sets the phenomenon_time of this Observation.


        :param phenomenon_time: The phenomenon_time of this Observation.  # noqa: E501
        :type: TmObject
        """
        if phenomenon_time is None:
            raise ValueError("Invalid value for `phenomenon_time`, must not be `None`")  # noqa: E501

        self._phenomenon_time = phenomenon_time

    @property
    def result_time(self):
        """Gets the result_time of this Observation.  # noqa: E501


        :return: The result_time of this Observation.  # noqa: E501
        :rtype: TmInstant
        """
        return self._result_time

    @result_time.setter
    def result_time(self, result_time):
        """Sets the result_time of this Observation.


        :param result_time: The result_time of this Observation.  # noqa: E501
        :type: TmInstant
        """
        if result_time is None:
            raise ValueError("Invalid value for `result_time`, must not be `None`")  # noqa: E501

        self._result_time = result_time

    @property
    def result(self):
        """Gets the result of this Observation.  # noqa: E501


        :return: The result of this Observation.  # noqa: E501
        :rtype: float
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Observation.


        :param result: The result of this Observation.  # noqa: E501
        :type: float
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def result_quality(self):
        """Gets the result_quality of this Observation.  # noqa: E501


        :return: The result_quality of this Observation.  # noqa: E501
        :rtype: list[object]
        """
        return self._result_quality

    @result_quality.setter
    def result_quality(self, result_quality):
        """Sets the result_quality of this Observation.


        :param result_quality: The result_quality of this Observation.  # noqa: E501
        :type: list[object]
        """

        self._result_quality = result_quality

    @property
    def valid_time(self):
        """Gets the valid_time of this Observation.  # noqa: E501


        :return: The valid_time of this Observation.  # noqa: E501
        :rtype: list[object]
        """
        return self._valid_time

    @valid_time.setter
    def valid_time(self, valid_time):
        """Sets the valid_time of this Observation.


        :param valid_time: The valid_time of this Observation.  # noqa: E501
        :type: list[object]
        """

        self._valid_time = valid_time

    @property
    def parameters(self):
        """Gets the parameters of this Observation.  # noqa: E501


        :return: The parameters of this Observation.  # noqa: E501
        :rtype: list[object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Observation.


        :param parameters: The parameters of this Observation.  # noqa: E501
        :type: list[object]
        """

        self._parameters = parameters

    @property
    def datastream_ref(self):
        """Gets the datastream_ref of this Observation.  # noqa: E501


        :return: The datastream_ref of this Observation.  # noqa: E501
        :rtype: str
        """
        return self._datastream_ref

    @datastream_ref.setter
    def datastream_ref(self, datastream_ref):
        """Sets the datastream_ref of this Observation.


        :param datastream_ref: The datastream_ref of this Observation.  # noqa: E501
        :type: str
        """
        if datastream_ref is None:
            raise ValueError("Invalid value for `datastream_ref`, must not be `None`")  # noqa: E501

        self._datastream_ref = datastream_ref

    @property
    def feature_of_interest_ref(self):
        """Gets the feature_of_interest_ref of this Observation.  # noqa: E501


        :return: The feature_of_interest_ref of this Observation.  # noqa: E501
        :rtype: str
        """
        return self._feature_of_interest_ref

    @feature_of_interest_ref.setter
    def feature_of_interest_ref(self, feature_of_interest_ref):
        """Sets the feature_of_interest_ref of this Observation.


        :param feature_of_interest_ref: The feature_of_interest_ref of this Observation.  # noqa: E501
        :type: str
        """

        self._feature_of_interest_ref = feature_of_interest_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Observation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
